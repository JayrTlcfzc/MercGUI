name: Build Image & Deploy

on:
  workflow_dispatch:   # Manual trigger in GitHub UI
  push:
    branches: [main]   # Auto-deploy on push to main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install dependencies
        run: npm ci

      - name: Write secret to .env file
        run: echo "${{ secrets.ENV_FILE }}" > .env

      - name: Build project (Vite)
        run: npm run build

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: JayrTlcfzc
          password: ${{ secrets.GHCR_PAT }}

      - name: Build Docker image
        run: |
          ls -la        # Debug: Check if dist/ is there
          docker build -f devops/docker-build/Dockerfile -t ghcr.io/jayrtlcfzc/mercgui:1.0-main .

      - name: Push Docker image to GHCR
        run: docker push ghcr.io/jayrtlcfzc/mercgui:1.0-main

      - name: Set up SSH connection
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SERVER_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -p ${{ secrets.SERVER_PORT }} ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: SSH Deploy to Server
        run: |
          ssh -i ~/.ssh/id_rsa -p ${{ secrets.SERVER_PORT }} ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
            echo "${{ secrets.GHCR_PAT }}" | sudo docker login ghcr.io -u ${{ secrets.GIT_USERNAME }} --password-stdin

            # Pull and restart container
            sudo docker pull ghcr.io/jayrtlcfzc/mercgui:1.0-main
            sudo docker stop mercgui || true
            sudo docker rm mercgui || true
            sudo docker run -d --name mercgui -p 8080:80 ghcr.io/jayrtlcfzc/mercgui:1.0-main

            # Ensure destination ownership before overwriting
            sudo chown -R ec2-user:ec2-user /var/www/html/demoapp-merchant

            # Overwrite existing files from container to EC2 host (forcefully)
            sudo docker cp mercgui:/var/www/html/demoapp-merchant/. /var/www/html/demoapp-merchant

            # Restore ownership back to Apache
            sudo chown -R apache:apache /var/www/html/demoapp-merchant

            echo "âœ” Files updated and ownership restored to Apache."
          EOF




